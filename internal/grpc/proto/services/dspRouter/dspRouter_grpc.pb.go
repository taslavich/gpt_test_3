// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services/dspRouter.proto

package dspRouterGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DspRouterService_GetBids_V2_4_FullMethodName        = "/dspRouter.DspRouterService/GetBids_V2_4"
	DspRouterService_GetRules_V2_4_FullMethodName       = "/dspRouter.DspRouterService/GetRules_V2_4"
	DspRouterService_GetDSPRules_V2_4_FullMethodName    = "/dspRouter.DspRouterService/GetDSPRules_V2_4"
	DspRouterService_GetSPPRules_V2_4_FullMethodName    = "/dspRouter.DspRouterService/GetSPPRules_V2_4"
	DspRouterService_UpdateRules_V2_4_FullMethodName    = "/dspRouter.DspRouterService/UpdateRules_V2_4"
	DspRouterService_UpdateDSPRules_V2_4_FullMethodName = "/dspRouter.DspRouterService/UpdateDSPRules_V2_4"
	DspRouterService_UpdateSPPRules_V2_4_FullMethodName = "/dspRouter.DspRouterService/UpdateSPPRules_V2_4"
	DspRouterService_GetBids_V2_5_FullMethodName        = "/dspRouter.DspRouterService/GetBids_V2_5"
)

// DspRouterServiceClient is the client API for DspRouterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DspRouterServiceClient interface {
	GetBids_V2_4(ctx context.Context, in *DspRouterRequest_V2_4, opts ...grpc.CallOption) (*DspRouterResponse_V2_4, error)
	GetRules_V2_4(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (*JsonResponse, error)
	GetDSPRules_V2_4(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (*JsonResponse, error)
	GetSPPRules_V2_4(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (*JsonResponse, error)
	UpdateRules_V2_4(ctx context.Context, in *JsonRequest, opts ...grpc.CallOption) (*UpdateRulesResponse, error)
	UpdateDSPRules_V2_4(ctx context.Context, in *JsonRequest, opts ...grpc.CallOption) (*UpdateRulesResponse, error)
	UpdateSPPRules_V2_4(ctx context.Context, in *JsonRequest, opts ...grpc.CallOption) (*UpdateRulesResponse, error)
	GetBids_V2_5(ctx context.Context, in *DspRouterRequest_V2_5, opts ...grpc.CallOption) (*DspRouterResponse_V2_5, error)
}

type dspRouterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDspRouterServiceClient(cc grpc.ClientConnInterface) DspRouterServiceClient {
	return &dspRouterServiceClient{cc}
}

func (c *dspRouterServiceClient) GetBids_V2_4(ctx context.Context, in *DspRouterRequest_V2_4, opts ...grpc.CallOption) (*DspRouterResponse_V2_4, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DspRouterResponse_V2_4)
	err := c.cc.Invoke(ctx, DspRouterService_GetBids_V2_4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dspRouterServiceClient) GetRules_V2_4(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (*JsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, DspRouterService_GetRules_V2_4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dspRouterServiceClient) GetDSPRules_V2_4(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (*JsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, DspRouterService_GetDSPRules_V2_4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dspRouterServiceClient) GetSPPRules_V2_4(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (*JsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, DspRouterService_GetSPPRules_V2_4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dspRouterServiceClient) UpdateRules_V2_4(ctx context.Context, in *JsonRequest, opts ...grpc.CallOption) (*UpdateRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRulesResponse)
	err := c.cc.Invoke(ctx, DspRouterService_UpdateRules_V2_4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dspRouterServiceClient) UpdateDSPRules_V2_4(ctx context.Context, in *JsonRequest, opts ...grpc.CallOption) (*UpdateRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRulesResponse)
	err := c.cc.Invoke(ctx, DspRouterService_UpdateDSPRules_V2_4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dspRouterServiceClient) UpdateSPPRules_V2_4(ctx context.Context, in *JsonRequest, opts ...grpc.CallOption) (*UpdateRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRulesResponse)
	err := c.cc.Invoke(ctx, DspRouterService_UpdateSPPRules_V2_4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dspRouterServiceClient) GetBids_V2_5(ctx context.Context, in *DspRouterRequest_V2_5, opts ...grpc.CallOption) (*DspRouterResponse_V2_5, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DspRouterResponse_V2_5)
	err := c.cc.Invoke(ctx, DspRouterService_GetBids_V2_5_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DspRouterServiceServer is the server API for DspRouterService service.
// All implementations must embed UnimplementedDspRouterServiceServer
// for forward compatibility.
type DspRouterServiceServer interface {
	GetBids_V2_4(context.Context, *DspRouterRequest_V2_4) (*DspRouterResponse_V2_4, error)
	GetRules_V2_4(context.Context, *GetRulesRequest) (*JsonResponse, error)
	GetDSPRules_V2_4(context.Context, *GetRulesRequest) (*JsonResponse, error)
	GetSPPRules_V2_4(context.Context, *GetRulesRequest) (*JsonResponse, error)
	UpdateRules_V2_4(context.Context, *JsonRequest) (*UpdateRulesResponse, error)
	UpdateDSPRules_V2_4(context.Context, *JsonRequest) (*UpdateRulesResponse, error)
	UpdateSPPRules_V2_4(context.Context, *JsonRequest) (*UpdateRulesResponse, error)
	GetBids_V2_5(context.Context, *DspRouterRequest_V2_5) (*DspRouterResponse_V2_5, error)
	mustEmbedUnimplementedDspRouterServiceServer()
}

// UnimplementedDspRouterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDspRouterServiceServer struct{}

func (UnimplementedDspRouterServiceServer) GetBids_V2_4(context.Context, *DspRouterRequest_V2_4) (*DspRouterResponse_V2_4, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBids_V2_4 not implemented")
}
func (UnimplementedDspRouterServiceServer) GetRules_V2_4(context.Context, *GetRulesRequest) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRules_V2_4 not implemented")
}
func (UnimplementedDspRouterServiceServer) GetDSPRules_V2_4(context.Context, *GetRulesRequest) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDSPRules_V2_4 not implemented")
}
func (UnimplementedDspRouterServiceServer) GetSPPRules_V2_4(context.Context, *GetRulesRequest) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSPPRules_V2_4 not implemented")
}
func (UnimplementedDspRouterServiceServer) UpdateRules_V2_4(context.Context, *JsonRequest) (*UpdateRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRules_V2_4 not implemented")
}
func (UnimplementedDspRouterServiceServer) UpdateDSPRules_V2_4(context.Context, *JsonRequest) (*UpdateRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDSPRules_V2_4 not implemented")
}
func (UnimplementedDspRouterServiceServer) UpdateSPPRules_V2_4(context.Context, *JsonRequest) (*UpdateRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSPPRules_V2_4 not implemented")
}
func (UnimplementedDspRouterServiceServer) GetBids_V2_5(context.Context, *DspRouterRequest_V2_5) (*DspRouterResponse_V2_5, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBids_V2_5 not implemented")
}
func (UnimplementedDspRouterServiceServer) mustEmbedUnimplementedDspRouterServiceServer() {}
func (UnimplementedDspRouterServiceServer) testEmbeddedByValue()                          {}

// UnsafeDspRouterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DspRouterServiceServer will
// result in compilation errors.
type UnsafeDspRouterServiceServer interface {
	mustEmbedUnimplementedDspRouterServiceServer()
}

func RegisterDspRouterServiceServer(s grpc.ServiceRegistrar, srv DspRouterServiceServer) {
	// If the following call pancis, it indicates UnimplementedDspRouterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DspRouterService_ServiceDesc, srv)
}

func _DspRouterService_GetBids_V2_4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DspRouterRequest_V2_4)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspRouterServiceServer).GetBids_V2_4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DspRouterService_GetBids_V2_4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspRouterServiceServer).GetBids_V2_4(ctx, req.(*DspRouterRequest_V2_4))
	}
	return interceptor(ctx, in, info, handler)
}

func _DspRouterService_GetRules_V2_4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspRouterServiceServer).GetRules_V2_4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DspRouterService_GetRules_V2_4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspRouterServiceServer).GetRules_V2_4(ctx, req.(*GetRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DspRouterService_GetDSPRules_V2_4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspRouterServiceServer).GetDSPRules_V2_4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DspRouterService_GetDSPRules_V2_4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspRouterServiceServer).GetDSPRules_V2_4(ctx, req.(*GetRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DspRouterService_GetSPPRules_V2_4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspRouterServiceServer).GetSPPRules_V2_4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DspRouterService_GetSPPRules_V2_4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspRouterServiceServer).GetSPPRules_V2_4(ctx, req.(*GetRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DspRouterService_UpdateRules_V2_4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspRouterServiceServer).UpdateRules_V2_4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DspRouterService_UpdateRules_V2_4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspRouterServiceServer).UpdateRules_V2_4(ctx, req.(*JsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DspRouterService_UpdateDSPRules_V2_4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspRouterServiceServer).UpdateDSPRules_V2_4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DspRouterService_UpdateDSPRules_V2_4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspRouterServiceServer).UpdateDSPRules_V2_4(ctx, req.(*JsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DspRouterService_UpdateSPPRules_V2_4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspRouterServiceServer).UpdateSPPRules_V2_4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DspRouterService_UpdateSPPRules_V2_4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspRouterServiceServer).UpdateSPPRules_V2_4(ctx, req.(*JsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DspRouterService_GetBids_V2_5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DspRouterRequest_V2_5)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DspRouterServiceServer).GetBids_V2_5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DspRouterService_GetBids_V2_5_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DspRouterServiceServer).GetBids_V2_5(ctx, req.(*DspRouterRequest_V2_5))
	}
	return interceptor(ctx, in, info, handler)
}

// DspRouterService_ServiceDesc is the grpc.ServiceDesc for DspRouterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DspRouterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dspRouter.DspRouterService",
	HandlerType: (*DspRouterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBids_V2_4",
			Handler:    _DspRouterService_GetBids_V2_4_Handler,
		},
		{
			MethodName: "GetRules_V2_4",
			Handler:    _DspRouterService_GetRules_V2_4_Handler,
		},
		{
			MethodName: "GetDSPRules_V2_4",
			Handler:    _DspRouterService_GetDSPRules_V2_4_Handler,
		},
		{
			MethodName: "GetSPPRules_V2_4",
			Handler:    _DspRouterService_GetSPPRules_V2_4_Handler,
		},
		{
			MethodName: "UpdateRules_V2_4",
			Handler:    _DspRouterService_UpdateRules_V2_4_Handler,
		},
		{
			MethodName: "UpdateDSPRules_V2_4",
			Handler:    _DspRouterService_UpdateDSPRules_V2_4_Handler,
		},
		{
			MethodName: "UpdateSPPRules_V2_4",
			Handler:    _DspRouterService_UpdateSPPRules_V2_4_Handler,
		},
		{
			MethodName: "GetBids_V2_5",
			Handler:    _DspRouterService_GetBids_V2_5_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/dspRouter.proto",
}
